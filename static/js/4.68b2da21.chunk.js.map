{"version":3,"sources":["client/client.js","pages/main/actions.js","ui/header.js","ui/modal-person.js","pages/main/main.js","pages/main/index.js"],"names":["client","axios","create","baseURL","API","BASE","headers","Accept","timeout","fetchMorePeople","dispatch","getState","nextPage","main","type","types","FETCH_MORE_PEOPLE","get","PEOPLE","then","response","FETCH_MORE_PEOPLE_SUCCESS","payload","data","catch","toast","error","FETCH_MORE_PEOPLE_FAIL","HeaderComponent","styled","Grid","Header","children","container","direction","alignItems","DialogTitle","DialogTitleMaterial","CustomTextField","TextField","props","label","connect","state","planet","open","person","handleClose","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","Dialog","onClose","aria-labelledby","id","name","gender","length","DialogContent","dividers","justify","InputProps","readOnly","variant","value","height","mass","hair_color","skin_color","eye_color","birth_year","DialogActions","Button","onClick","color","autoFocus","Container","Card","CardMaterial","Span","span","GridButton","ButtonLoading","CardContent","CardContentMaterial","mapDispatchToProps","fetchPeople","FETCH_PEOPLE","FETCH_PEOPLE_SUCCESS","store","e","FETCH_PEOPLE_FAIL","fetchStarships","page","STARSHIPS","count","next","previous","results","FETCH_STARSHIPS_SUCCESS","reduce","acc","curr","url","match","join","resetPlanet","RESET_PLANET","fetchPlanet","PLANETS","FETCH_PLANET_SUCCESS","people","starships","loading","disableButtonLoadMore","useState","openModal","setOpenModal","setPerson","handleOpenModal","homeworld","useEffect","item","xs","allPeople","align","CircularProgress","spacing","map","key","CardActionArea","CardMedia","component","alt","src","number","title","Typography","gutterBottom","starship","Fragment","starship_class","renderStarships","CardActions","size","disabled","moreData"],"mappings":"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","file":"static/js/4.68b2da21.chunk.js","sourcesContent":["import axios from 'axios'\nimport { API } from 'routes'\n\nconst client = axios.create({\n  baseURL: API.BASE,\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json'\n  },\n  timeout: 30000\n})\n\nexport default client\n","import { ActionTypes as types } from './constants'\nimport client from 'client'\nimport { store } from 'store'\nimport { API } from 'routes'\nimport { toast } from 'react-toastify'\n\nconst reduceData = data => {\n  return data.reduce(\n    (acc, curr) => {\n      acc.data[curr.url] = curr\n      return { ...acc }\n    },\n    { data: {} }\n  )\n}\n\nexport const fetchPeople = () => dispatch => {\n  dispatch({\n    type: types.FETCH_PEOPLE\n  })\n\n  client.get(`${API.PEOPLE}`)\n    .then(response => {\n      dispatch({\n        type: types.FETCH_PEOPLE_SUCCESS,\n        payload: response.data\n      })\n      store.dispatch(fetchMorePeople())\n    })\n    .catch(e => {\n      toast.error('Ooops! Não foi possível carregar os personagens.')\n      dispatch({\n        type: types.FETCH_PEOPLE_FAIL\n      })\n    })\n}\n\nexport const fetchMorePeople = () => (dispatch, getState) => {\n  const { nextPage } = getState().main\n\n  dispatch({\n    type: types.FETCH_MORE_PEOPLE\n  })\n\n  client.get(`${API.PEOPLE}?page=${nextPage}`)\n    .then(response => {\n      dispatch({\n        type: types.FETCH_MORE_PEOPLE_SUCCESS,\n        payload: response.data\n      })\n    })\n    .catch(() => {\n      toast.error('Ooops! Não foi possível carregar outros personagens.')\n      dispatch({\n        type: types.FETCH_MORE_PEOPLE_FAIL\n      })\n    })\n}\n\nexport const fetchStarships = page => dispatch => {\n  client.get(`${API.STARSHIPS}?page=${page}`)\n    .then(response => {\n      const { count, next, previous, results } = response.data\n      dispatch({\n        type: types.FETCH_STARSHIPS_SUCCESS,\n        payload: { count, next, previous, data: reduceData(results).data }\n      })\n\n      next && store.dispatch(fetchStarships(next.match(/\\d+/g).join('')))\n    })\n    .catch(() =>\n      toast.error('Ooops! Não foi possível carregar algumas starships.')\n    )\n}\n\nexport const fetchPlanet = id => dispatch => {\n  client.get(`${API.PLANETS}${id}`)\n    .then(response => {\n      dispatch({\n        type: types.FETCH_PLANET_SUCCESS,\n        payload: response.data.name\n      })\n    })\n}\n\nexport const resetPlanet = () => dispatch => {\n  dispatch({\n    type: types.RESET_PLANET\n  })\n}\n","import React from 'react'\nimport t from 'prop-types'\nimport { Grid } from '@material-ui/core'\nimport styled from 'styled-components'\n\nconst Header = ({ children }) => (\n  <HeaderComponent container direction='column' alignItems='center'>\n    React Wars\n  </HeaderComponent>\n)\n\nHeader.propTypes = {\n  children: t.node.isRequired\n}\n\nconst HeaderComponent = styled(Grid)`\n  z-index: 100;\n  position: fixed;\n  width: 100%;\n  height: 60px;\n  background: #8936bc;\n  font-size: 30px;\n  font-weight: bold;\n  color: #fff;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-family: cursive;\n`\n\nexport default Header\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport t from 'prop-types'\nimport styled from 'styled-components'\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle as DialogTitleMaterial,\n  useMediaQuery,\n  Grid,\n  TextField\n} from '@material-ui/core'\nimport { useTheme } from '@material-ui/core/styles'\n\nfunction ModalPerson ({ planet, open, person, handleClose }) {\n  const theme = useTheme()\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'))\n\n  return (\n    <div>\n      <Dialog\n        fullScreen={fullScreen}\n        open={open}\n        onClose={handleClose}\n        aria-labelledby='responsive-dialog-title'\n      >\n        <DialogTitle id='responsive-dialog-title'>\n          {person.name} ({person.gender}) {planet.length > 0 && `de ${planet}`}\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid\n            container\n            direction='row'\n            justify='space-around'\n          >\n            <TextField\n              label='Altura'\n              InputProps={{\n                readOnly: true\n              }}\n              variant='outlined'\n              value={person.height}\n            />\n            <CustomTextField\n              label='Massa'\n              variant='outlined'\n              InputProps={{\n                readOnly: true\n              }}\n              value={person.mass}\n            />\n          </Grid>\n          <Grid\n            container\n            direction='row'\n            justify='space-around'\n          >\n            <CustomTextField\n              variant='outlined'\n              label='Cor do cabelo'\n              InputProps={{\n                readOnly: true\n              }}\n              value={person.hair_color}\n            />\n            <CustomTextField\n              variant='outlined'\n              label='Cor da pele'\n              InputProps={{\n                readOnly: true\n              }}\n              value={person.skin_color}\n            />\n          </Grid>\n          <Grid\n            container\n            direction='row'\n            justify='space-around'\n          >\n            <CustomTextField\n              variant='outlined'\n              label='Cor do olho'\n              InputProps={{\n                readOnly: true\n              }}\n              value={person.eye_color}\n            />\n            <CustomTextField\n              variant='outlined'\n              label='Ano de nascimento'\n              InputProps={{\n                readOnly: true\n              }}\n              value={person.birth_year}\n            />\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color='primary' variant='contained' autoFocus>\n            Fechar\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n\nModalPerson.propTypes = {\n  planet: t.string.isRequired,\n  open: t.bool,\n  person: t.object.isRequired,\n  handleClose: t.func.isRequired\n}\n\nconst DialogTitle = styled(DialogTitleMaterial)`\n  width: 50vw;\n`\n\nconst CustomTextField = styled(TextField)`\n  && {\n    margin-top: ${props => props.label === 'Massa' ? 0 : 20}px;\n\n    @media(max-width: 400px) {\n      margin-top: 20px;\n    }\n  }\n`\n\nconst mapStateToProps = state => {\n  const { main } = state\n\n  return { ...main }\n}\n\nexport default connect(\n  mapStateToProps,\n  null\n)(ModalPerson)\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport t from 'prop-types'\nimport styled from 'styled-components'\n\nimport {\n  Button,\n  Grid,\n  Card as CardMaterial,\n  CardMedia,\n  CardActionArea,\n  CardActions,\n  CardContent as CardContentMaterial,\n  Typography,\n  CircularProgress\n} from '@material-ui/core'\n\nimport {\n  fetchPeople,\n  fetchMorePeople,\n  fetchStarships,\n  fetchPlanet,\n  resetPlanet\n} from './actions'\n\nimport { Header, ModalPerson } from 'ui'\n\nfunction Main ({\n  people,\n  starships,\n  loading,\n  disableButtonLoadMore,\n  fetchPeople,\n  fetchMorePeople,\n  fetchStarships,\n  fetchPlanet,\n  resetPlanet\n}) {\n  const [openModal, setOpenModal] = useState(false)\n  const [person, setPerson] = useState({})\n\n  function handleOpenModal (person) {\n    setPerson(person)\n    fetchPlanet(person.homeworld.match(/\\d+/).join(''))\n    setOpenModal(true)\n  }\n\n  function handleCloseModal () {\n    setPerson({})\n    setOpenModal(false)\n    resetPlanet()\n  }\n\n  useEffect(() => {\n    fetchPeople()\n  }, [fetchPeople])\n\n  useEffect(() => {\n    fetchStarships(1)\n  }, [fetchStarships])\n\n  useEffect(() => {\n    resetPlanet()\n  }, [resetPlanet])\n\n  function renderStarships (starship) {\n    if (starships.data[starship]) {\n      return (\n        <React.Fragment key={starships.data[starship].name}>\n          <span>\n            {starships.data[starship].name}  ({starships.data[starship].starship_class})\n          </span>\n          <br />\n        </React.Fragment>\n      )\n    }\n  }\n\n  function fetchImage (number) {\n    if (number === 86) number = 87\n    return `https://i.picsum.photos/id/${number}/350/200.jpg`\n  }\n\n  return (\n    <Grid>\n      <Header>\n        React Wars\n      </Header>\n\n      <Container item xs={12}>\n        {openModal && (\n          <ModalPerson\n            open={openModal}\n            handleClose={handleCloseModal}\n            person={person}\n          />\n        )}\n        {loading.allPeople ? (\n          <Grid align='center'>\n            <CircularProgress />\n          </Grid>\n        ) : (\n          <>\n            <Grid container justify='center' spacing={2}>\n              {people.results.map(person => (\n                <Grid key={person.url} item>\n                  <Card onClick={() => handleOpenModal(person)}>\n                    <CardActionArea>\n                      <CardMedia\n                        component='img'\n                        alt={person.name}\n                        height='140'\n                        src={fetchImage(person.url.match(/\\d+/).join(''))}\n                        title={person.name}\n                      />\n                      <CardContent>\n                        <Typography gutterBottom variant='h5' component='h2'>\n                          {person.name} <Span>({person.gender})</Span>\n                        </Typography>\n                        <Typography variant='body2' color='textSecondary' component='p'>\n                          {person.starships.map(starship => {\n                            return renderStarships(starship)\n                          })}\n                        </Typography>\n                      </CardContent>\n                    </CardActionArea>\n                    <CardActions>\n                      <Button size='small' color='primary' onClick={() => handleOpenModal(person)}>\n                        Ver mais\n                      </Button>\n                    </CardActions>\n                  </Card>\n                </Grid>\n              ))}\n            </Grid>\n            <GridButton container direction='row' justify='center'>\n              <ButtonLoading\n                variant='contained'\n                color='primary'\n                onClick={fetchMorePeople}\n                disabled={loading.moreData || disableButtonLoadMore}\n              >\n                {loading.moreData ? (\n                  <CircularProgress size={25} color='inherit' />\n                ) : disableButtonLoadMore ? (\n                  'Não tem mais personagens para carregar'\n                ) : (\n                  'Carregar mais personagens'\n                )}\n              </ButtonLoading>\n            </GridButton>\n          </>\n        )}\n      </Container>\n    </Grid>\n  )\n}\n\nconst Container = styled(Grid)`\n  padding-bottom: 30px;\n  padding-top: 80px;\n`\n\nconst Card = styled(CardMaterial)`\n  max-width: 345px;\n`\n\nconst Span = styled.span`\n  font-size: 17px;\n`\n\nconst GridButton = styled(Grid)`\n  margin-top: 30px;\n`\n\nconst ButtonLoading = styled(Button)`\n  && {\n    width: 255px;\n    &:disabled {\n      color: #fff;\n      background-color: #3f51b5;\n      opacity: 0.7;\n    }\n  }\n`\n\nconst CardContent = styled(CardContentMaterial)`\n  width: 330px;\n  height: 135px;\n`\n\nMain.propTypes = {\n  people: t.object.isRequired,\n  starships: t.object.isRequired,\n  loading: t.object.isRequired,\n  disableButtonLoadMore: t.bool.isRequired,\n  fetchPeople: t.func.isRequired,\n  fetchMorePeople: t.func.isRequired,\n  fetchStarships: t.func.isRequired,\n  fetchPlanet: t.func.isRequired,\n  resetPlanet: t.func.isRequired\n}\n\nconst mapStateToProps = state => {\n  const { main } = state\n\n  return { ...main }\n}\n\nconst mapDispatchToProps = {\n  fetchPeople,\n  fetchMorePeople,\n  fetchStarships,\n  resetPlanet,\n  fetchPlanet\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Main)\n","export { default } from './main'\n"],"sourceRoot":""}